// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model profile {
  user   user @relation(fields: [userId], references: [id])
  userId Int  @id

  picture String?
  bio     String? @db.VarChar(100)
}

model refreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime
  expiresAt DateTime

  user   user @relation(fields: [userId], references: [id])
  userId Int
}

model revokedToken {
  id         Int      @id @default(autoincrement())
  token      String
  revoketdAt DateTime
  expiresAt  DateTime

  user   user @relation(fields: [userId], references: [id])
  userId Int
}

model user {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(15)
  email    String @unique @db.VarChar(254)
  password String @db.VarChar(128)

  profile      profile?
  refreshToken refreshToken[]
  revokedToken revokedToken[]

  favoriteMovie favoriteMovie[]
  movieWatched  movieWatched[]
  movieComment  movieComment[]
  movieNote     movieNote[]

  favoriteSerie favoriteSerie[]
  serieWatched  serieWatched[]
  serieComment  serieComment[]
  serieNote     serieNote[]
}

model favoriteMovie {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  movie   movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([userId, movieId])
}

model favoriteSerie {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  serie   serie @relation(fields: [serieId], references: [id])
  serieId Int

  @@id([userId, serieId])
}

model movieWatched {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  movie   movie @relation(fields: [movieId], references: [id])
  movieId Int

  watchedDate DateTime @default(now())

  @@id([userId, movieId])
}

model serieWatched {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  serie   serie @relation(fields: [serieId], references: [id])
  serieId Int

  watchedDate DateTime @default(now())

  @@id([userId, serieId])
}

model movieComment {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  movie   movie @relation(fields: [movieId], references: [id])
  movieId Int

  comment     String   @db.VarChar(100)
  commentDate DateTime @default(now())

  @@id([userId, movieId])
}

model serieComment {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  serie   serie @relation(fields: [serieId], references: [id])
  serieId Int

  comment     String   @db.VarChar(100)
  commentDate DateTime @default(now())

  @@id([userId, serieId])
}

model movieNote {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  movie   movie @relation(fields: [movieId], references: [id])
  movieId Int

  note Decimal @db.Decimal(2, 1)

  @@id([userId, movieId])
}

model serieNote {
  user    user  @relation(fields: [userId], references: [id])
  userId  Int
  serie   serie @relation(fields: [serieId], references: [id])
  serieId Int

  note Decimal @db.Decimal(2, 1)

  @@id([userId, serieId])
}

model movie {
  id   Int    @id
  name String @db.VarChar(25)

  faviriteMovie favoriteMovie[]
  movieWatched  movieWatched[]
  movieComment  movieComment[]
  movieNote     movieNote[]
}

model serie {
  id   Int    @id
  name String @db.VarChar(25)

  favoriteSerie favoriteSerie[]
  serieWatched  serieWatched[]
  serieComment  serieComment[]
  serieNote     serieNote[]
}
